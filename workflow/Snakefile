configfile: "config/config.yaml"

wildcard_constraints:
    sample="|".join(config['Samples']),
    strand="|".join(config['Strands']),
    bin_size="|".join(config['Bin_size'])

rule all:
    input:
        expand("results/star/{sample}/NormCoverage_3p_{strand}_bin{bin_size}bp.bw", sample=config['Samples'], strand=config['Strands'], bin_size=config['Bin_size'])



##-------------------------------------------------------------------##
##   Download gtf, cDNA (coding transcripts), and DNA from Gencode   ##
##-------------------------------------------------------------------##

rule download_ensembl_gtf:
    output: 
        "{config['outfold_genome']}/GRCm39/gene_annotation.gtf"
    params: 
        url = lambda wildcards: config['URLs']['GRCm39']['gtf']
    shell:
        """
        wget -O {output}.gz {params.url}
        gunzip {output}.gz
        """

rule download_ensembl_cdna:
    output: 
        "{config['outfold_genome']}/GRCm39/cdna.fa"
    params: 
        url = lambda wildcards: config['URLs']['GRCm39']['cdna']
    shell:
        """
        wget -O {output}.gz {params.url}
        gunzip {output}.gz
        """

rule download_ensembl_genome:
    output: 
        "{config['outfold_genome']}/GRCm39/genome.fa"
    params:
        url = lambda wildcards: config['URLs']['GRCm39']['genome']
    shell:
        """
        wget -O {output}.gz {params.url}
        gunzip {output}.gz
        """

##----------------------------------------##
##  Generate STAR genome index and align  ##
##----------------------------------------##

rule star_genome_index:
    input:
        genome = "{config['outfold_genome']}/GRCm39/genome.fa",
        gtf = "{config['outfold_genome']}/GRCm39/gene_annotation.gtf"
    output:
        genome_dir = directory("{config['outfold_genome']}/GRCm39/star_index/")
    params:
        overhang = config['read_length']-1
    threads: 24
    shell:
        """
        module load gcc/11.3.0 star
        mkdir -p {output.genome_dir}
        STAR --runMode genomeGenerate \
             --genomeDir {output.genome_dir} \
             --genomeFastaFiles {input.genome} \
             --sjdbGTFfile {input.gtf} \
             --sjdbOverhang {params.overhang} \
             --limitGenomeGenerateRAM 81000000000 \
             --runThreadN {threads}
        """

rule star_align:
    input:
        fq = "resources/fastq/{sample}.fastq",
        gtf = "{config['outfold_genome']}/GRCm39/gene_annotation.gtf",
        genome_dir = "{config['outfold_genome']}/GRCm39/star_index/"
    output:
        "{config['outfold_star']}/{sample}/Aligned.sortedByCoord.out.bam"
    params:
        prefix="results/star/{sample}/",
        outsamtype = "BAM SortedByCoordinate",
        limitram = 81000000000
    threads: 12
    shell:
        """
        module load gcc/11.3.0 star
        STAR --runMode alignReads \
             --readFilesIn {input.fq} \
             --genomeDir {input.genome_dir} \
             --outFileNamePrefix {params.prefix} \
             --outSAMtype {params.outsamtype} \
             --limitBAMsortRAM {params.limitram} \
             --sjdbGTFfile {input.gtf} \
             --runThreadN {threads}
        """

##--------------------------------------##
##  BAM files indexing                  ##
##--------------------------------------##

rule sam_index:
    input:
        bam="{config['outfold_star']}/{sample}/Aligned.sortedByCoord.out.bam"
    output:
        bam_index="{config['outfold_star']}/{sample}/Aligned.sortedByCoord.out.bam.bai"
    shell:
        """
        ml gcc/11.3.0 samtools
        samtools index {input}
        """

##--------------------------------------##
##  Coverage                            ##
##--------------------------------------##

rule chrom_size:
    input:
        genome="{config['outfold_genome']}/GRCm39/genome.fa"
    output:
        chrom_size="{config['outfold_genome']}/GRCm39/mm39.chrom.sizes"
    shell:
        """
        ml gcc/11.3.0 samtools
        samtools faidx {input.genome}
        cut -f1,2 {input.genome}.fai > {output.chrom_size}
        """

rule coverage_bedgraph:
    input:
        bam="{config['outfold_star']}/{sample}/Aligned.sortedByCoord.out.bam",
    output:
        bg="{config['outfold_counts']}/{sample}/coverage_3p_{strand}.bedgraph"
    params:
        strand = lambda wildcards: '+' if wildcards.strand == "forward" else '-' if wildcards.strand == "reverse" else ''
    shell:
        """
        ml gcc/11.3.0 samtools bedtools2
        samtools view -b {input.bam} | bedtools genomecov -ibam stdin -bg -strand {params.strand} -3 | grep "^\<chr" > {output.bg}
        """

rule get_total_count:
    input:
        bg="{config['outfold_counts']}/{sample}/coverage_3p_{strand}.bedgraph"
    output:
        counts="{config['outfold_counts']}/{sample}/total_counts_{strand}.txt"
    shell:
        """
        count=$(awk '{{sum+=$4}} END {{print sum}}' {input.bg})
        echo $count > {output.counts}
        """

rule normalize_sort_bedgraph:
    input:
        bg="{config['outfold_counts']}/{sample}/coverage_3p_{strand}.bedgraph",
        total_count="{config['outfold_counts']}/{sample}/total_counts_{strand}.txt",
        total_counts=expand("{config['outfold_counts']}/{sample}/total_counts_{strand}.txt", sample=config['Samples'], strand=config['Strands']),
    output:
        norm_bg="{config['outfold_norm']}/{sample}/NormCoverage_3p_{strand}.bedgraph"
    shell:
        """
        ./scripts/normalize_bedgraph.sh {input.bg} {input.total_count} {output.norm_bg} {input.total_counts} 
        """

rule norm_coverage_bw:
    input:
        norm_bg="{config['outfold_norm']}/{sample}/NormCoverage_3p_{strand}.bedgraph",
        chrom_size="{config['outfold_genome']}/GRCm39/mm39.chrom.sizes"
    output:
        bw="{config['outfold_norm']}/{sample}/NormCoverage_3p_{strand}.bw"
    shell:
        """
        bedGraphToBigWig {input.norm_bg} {input.chrom_size} {output.bw}
        """

rule bin_coverage:
    input:
        bw="{config['outfold_norm']}/{sample}/NormCoverage_3p_{strand}.bw"
    output:
        bin_bw="{config['outfold_binned']}/{sample}/NormCoverage_3p_{strand}_bin{bin_size}bp.bw"
    shell:
        """
        python scripts/bin_bigwig.py  -i {input.bw} -o {output.bin_bw} -b {wildcards.bin_size}
        """

##--------------------------------------##
##  Track Hub                           ##
##--------------------------------------##