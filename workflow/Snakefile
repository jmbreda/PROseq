configfile: "config/config.yaml"

wildcard_constraints:
    sample="|".join(config['Samples']),
    strand="|".join(config['Strands']),
    bin_size="|".join(config['Bin_size'])

rule all:
    input:
        expand(os.path.join(config['outfold_binned'],"{sample}","NormCoverage_3p_{strand}_bin{bin_size}bp.bw"), sample=config['Samples'], strand=config['Strands'], bin_size=config['Bin_size'])


##-------------------------------------------------------------------##
##   Download gtf, cDNA (coding transcripts), and DNA from Gencode   ##
##-------------------------------------------------------------------##

rule download_ensembl_gtf:
    output: 
        os.path.join(config['outfold_genome'],config['Species'],"gene_annotation.gtf")
    params: 
        url = lambda wildcards: config['URLs']['GRCm39']['gtf']
    shell:
        """
        wget -O {output}.gz {params.url}
        gunzip {output}.gz
        """

rule download_ensembl_cdna:
    output: 
        os.path.join(config['outfold_genome'],config['Species'],"cdna.fa")
    params: 
        url = lambda wildcards: config['URLs']['GRCm39']['cdna']
    shell:
        """
        wget -O {output}.gz {params.url}
        gunzip {output}.gz
        """

rule download_ensembl_genome:
    output: 
        os.path.join(config['outfold_genome'],config['Species'],"genome.fa")
    params:
        url = lambda wildcards: config['URLs']['GRCm39']['genome']
    shell:
        """
        wget -O {output}.gz {params.url}
        gunzip {output}.gz
        """

##----------------------------------------##
##  Generate STAR genome index and align  ##
##----------------------------------------##

rule star_genome_index:
    input:
        genome = os.path.join(config['outfold_genome'],config['Species'],"genome.fa"),
        gtf = os.path.join(config['outfold_genome'],config['Species'],"gene_annotation.gtf")
    output:
        genome_dir = directory(os.path.join(config['outfold_genome'],config['Species'],"star_index"))
    params:
        overhang = config['read_length']-1
    threads: 24
    shell:
        """
        module load gcc/11.3.0 star
        mkdir -p {output.genome_dir}
        STAR --runMode genomeGenerate \
             --genomeDir {output.genome_dir} \
             --genomeFastaFiles {input.genome} \
             --sjdbGTFfile {input.gtf} \
             --sjdbOverhang {params.overhang} \
             --limitGenomeGenerateRAM 81000000000 \
             --runThreadN {threads}
        """

rule cutadapt:
    input:
        fq = os.path.join(config['outfold_fastq'],"{sample}.fastq")
    output:
        fq_trimmed = os.path.join(config['outfold_fastq'],"{sample}_trimmed.fastq"),
        report = os.path.join(config['outfold_fastq'],"{sample}_trimmed_report.txt")
    params:
        adapter = config['adapter']
    threads: 12
    shell:
        """
        source activate cutadapt
        cutadapt -a {params.adapter} -o {output.fq_trimmed} -j 12 {input.fq} > {output.report}
        """

rule star_align:
    input:
        fq = os.path.join(config['outfold_fastq'],"{sample}.fastq"),
        gtf = os.path.join(config['outfold_genome'],config['Species'],"gene_annotation.gtf"),
        genome_dir = directory(os.path.join(config['outfold_genome'],config['Species'],"star_index"))
    output:
        os.path.join(config['outfold_star'],"{sample}","Aligned.sortedByCoord.out.bam")
    params:
        prefix=os.path.join(config['outfold_star'],"{sample}/"),
        outsamtype = "BAM SortedByCoordinate",
        limitram = 81000000000
    threads: 12
    shell:
        """
        module load gcc/11.3.0 star
        STAR --runMode alignReads \
             --readFilesIn {input.fq} \
             --genomeDir {input.genome_dir} \
             --outFileNamePrefix {params.prefix} \
             --outSAMtype {params.outsamtype} \
             --limitBAMsortRAM {params.limitram} \
             --sjdbGTFfile {input.gtf} \
             --runThreadN {threads}
        """

##--------------------------------------##
##  BAM files indexing                  ##
##--------------------------------------##

rule sam_index:
    input:
        bam=os.path.join(config['outfold_star'],"{sample}/Aligned.sortedByCoord.out.bam")
    output:
        bam_index=os.path.join(config['outfold_star'],"{sample}/Aligned.sortedByCoord.out.bam.bai")
    shell:
        """
        ml gcc/11.3.0 samtools
        samtools index {input}
        """

##--------------------------------------##
##  Coverage                            ##
##--------------------------------------##

rule chrom_size:
    input:
        genome=os.path.join(config['outfold_genome'],config['Species'],"genome.fa")
    output:
        chrom_size=os.path.join(config['outfold_genome'],config['Species'],"mm39.chrom.sizes")
    shell:
        """
        ml gcc/11.3.0 samtools
        samtools faidx {input.genome}
        cut -f1,2 {input.genome}.fai > {output.chrom_size}
        """

# for PRO-seq data, we only need the 3'-end of the reads. However the protocol repots reverse complement of the reads. So I take the 5'-end and flip the strand.
rule coverage_bedgraph:
    input:
        bam=os.path.join(config['outfold_star'],"{sample}","Aligned.sortedByCoord.out.bam")
    output:
        bg=os.path.join(config['outfold_counts'],"{sample}","coverage_3p_{strand}.bedgraph")
    params:
        strand = lambda wildcards: '-' if wildcards.strand == "forward" else '+' if wildcards.strand == "reverse" else ''
    shell:
        """
        ml gcc/11.3.0 samtools bedtools2
        samtools view -b {input.bam} | bedtools genomecov -ibam stdin -bg -strand {params.strand} -5 | grep "^\<chr" > {output.bg}
        """

rule get_total_count:
    input:
        bg=os.path.join(config['outfold_counts'],"{sample}","coverage_3p_{strand}.bedgraph")
    output:
        counts=os.path.join(config['outfold_counts'],"{sample}","total_counts_{strand}.txt")
    shell:
        """
        count=$(awk '{{sum+=$4}} END {{print sum}}' {input.bg})
        echo $count > {output.counts}
        """

rule normalize_sort_bedgraph:
    input:
        bg=os.path.join(config['outfold_counts'],"{sample}","coverage_3p_{strand}.bedgraph"),
        total_count=os.path.join(config['outfold_counts'],"{sample}","total_counts_{strand}.txt"),
        total_counts=expand(os.path.join(config['outfold_counts'],"{sample}","total_counts_{strand}.txt"),sample=config['Samples'], strand=config['Strands'])
    output:
        norm_bg=os.path.join(config['outfold_norm'],"{sample}","NormCoverage_3p_{strand}.bedgraph")
    shell:
        """
        ./scripts/normalize_bedgraph.sh {input.bg} {input.total_count} {output.norm_bg} {input.total_counts} 
        """

rule norm_coverage_bw:
    input:
        norm_bg=os.path.join(config['outfold_norm'],"{sample}","NormCoverage_3p_{strand}.bedgraph"),
        chrom_size=os.path.join(config['outfold_genome'],config['Species'],"mm39.chrom.sizes")
    output:
        bw=os.path.join(config['outfold_norm'],"{sample}","NormCoverage_3p_{strand}.bw")
    shell:
        """
        bedGraphToBigWig {input.norm_bg} {input.chrom_size} {output.bw}
        """

rule bin_coverage:
    input:
        bw=os.path.join(config['outfold_norm'],"{sample}","NormCoverage_3p_{strand}.bw")
    output:
        bin_bw=os.path.join(config['outfold_binned'],"{sample}","NormCoverage_3p_{strand}_bin{bin_size}bp.bw")
    shell:
        """
        python scripts/bin_bigwig.py  -i {input.bw} -o {output.bin_bw} -b {wildcards.bin_size}
        """


##--------------------------------------##
##  Get gene phase and amplitude        ##
##--------------------------------------##

rule get_gene_only_gtf:
    input:
        gtf=os.path.join(config['outfold_genome'],config['Species'],"gene_annotation.gtf")
    output:
        gtf_gene=os.path.join(config['outfold_genome'],config['Species'],"gene.gtf")
    shell:
        """
        awk '$3=="gene"' {input.gtf} | grep "^chr" > {output.gtf_gene}
        """

rule get_gene_phase_amp:
    input:
        gtf=os.path.join(config['outfold_genome'],config['Species'],"gene.gtf")
        bw_folder=config['outfold_binned']
    output:
        bed=os.path.join(config['outfold_binned'],"gene_phase_amp_{bin_size}bp.bed"),
        gene_phase_amp=os.path.join(config['outfold_binned'],"gene_phase_amp_{bin_size}bp.csv"),
        fig=os.path.join(config['outfold_fig'],"gene_phase_amp_{bin_size}bp.pdf")
    shell:
        """
        python scripts/get_gene_phase.py --gtf {input.gtf} --bin_size {wildcards.bin_size} --bw_folder {input.bw_folder} --out_bed {output.bed} --out_txt {output.gene_phase_amp} --out_fig {output.fig}
        """

rule bed_to_bigBed:
    input:
        bed=os.path.join(config['outfold_binned'],"gene_phase_amp_{bin_size}bp.bed"),
        chrom_size=os.path.join(config['outfold_genome'],config['Species'],"mm39.chrom.sizes")
    output:
        bb=os.path.join(config['outfold_binned'],"gene_phase_amp_{bin_size}bp.bb")
    shell:
        """
        bedSort {input.bed} {input.bed}
        bedToBigBed {input.bed} {input.chrom_size} {output.bb}
        """
    

##--------------------------------------##
##  Track Hub                           ##
##--------------------------------------##

