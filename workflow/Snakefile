configfile: "config/config.yaml"

rule all:
    input:
        expand("results/star/{sample}/coverage_norm.bw", sample=config['Samples'])


##-------------------------------------------------------------------##
##   Download gtf, cDNA (coding transcripts), and DNA from Gencode   ##
##-------------------------------------------------------------------##

rule download_ensembl_gtf:
    output: 
        "resources/genome/GRCm39/gene_annotation.gtf"
    params: 
        url = lambda wildcards: config['URLs']['GRCm39']['gtf']
    shell:
        """
        wget -O {output}.gz {params.url}
        gunzip {output}.gz
        """

rule download_ensembl_cdna:
    output: 
        "resources/genome/GRCm39/cdna.fa"
    params: 
        url = lambda wildcards: config['URLs']['GRCm39']['cdna']
    shell:
        """
        wget -O {output}.gz {params.url}
        gunzip {output}.gz
        """

rule download_ensembl_genome:
    output: 
        "resources/genome/GRCm39/genome.fa"
    params:
        url = lambda wildcards: config['URLs']['GRCm39']['genome']
    shell:
        """
        wget -O {output}.gz {params.url}
        gunzip {output}.gz
        """

##----------------------------------------##
##  Generate STAR genome index and align  ##
##----------------------------------------##

rule star_genome_index:
    input:
        genome = "resources/genome/GRCm39/genome.fa",
        gtf = "resources/genome/GRCm39/gene_annotation.gtf"
    output:
        genome_dir = directory("resources/genome/GRCm39/star_index/")
    params:
        overhang = config['read_length']-1
    threads: 24
    shell:
        """
        module load gcc/11.3.0 star
        mkdir -p {output.genome_dir}
        STAR --runMode genomeGenerate \
             --genomeDir {output.genome_dir} \
             --genomeFastaFiles {input.genome} \
             --sjdbGTFfile {input.gtf} \
             --sjdbOverhang {params.overhang} \
             --limitGenomeGenerateRAM 81000000000 \
             --runThreadN {threads}
        """

rule star_align:
    input:
        fq = "resources/fastq/{sample}.fastq",
        gtf = "resources/genome/GRCm39/gene_annotation.gtf",
        genome_dir = "resources/genome/GRCm39/star_index/"
    output:
        "results/star/{sample}/Aligned.sortedByCoord.out.bam"
    params:
        prefix="results/star/{sample}/",
        outsamtype = "BAM SortedByCoordinate",
        limitram = 81000000000
    threads: 12
    shell:
        """
        module load gcc/11.3.0 star
        STAR --runMode alignReads \
             --readFilesIn {input.fq} \
             --genomeDir {input.genome_dir} \
             --outFileNamePrefix {params.prefix} \
             --outSAMtype {params.outsamtype} \
             --limitBAMsortRAM {params.limitram} \
             --sjdbGTFfile {input.gtf} \
             --runThreadN {threads}
        """

##--------------------------------------##
##  BAM files indexing                  ##
##--------------------------------------##

rule sam_index:
    input:
        bam="results/star/{sample}/Aligned.sortedByCoord.out.bam"
    output:
        bam_index="results/star/{sample}/Aligned.sortedByCoord.out.bam.bai"
    shell:
        """
        ml gcc/11.3.0 samtools
        samtools index {input}
        """

##--------------------------------------##
##  Coverage                            ##
##--------------------------------------##

rule chrom_size:
    input:
        genome="resources/genome/GRCm39/genome.fa"
    output:
        chrom_size="resources/genome/GRCm39/mm39.chrom.sizes"
    shell:
        """
        ml gcc/11.3.0 samtools
        samtools faidx {input.genome}
        cut -f1,2 {input.genome}.fai > {output.chrom_size}
        """

rule coverage_bedgraph:
    input:
        bam="results/star/{sample}/Aligned.sortedByCoord.out.bam",
    output:
        bg="results/star/{sample}/coverage.bedgraph"
    shell:
        """
        ml gcc/11.3.0 samtools bedtools2
        samtools view -b {input.bam} | bedtools genomecov -ibam stdin -bg | grep "^\<chr" > {outpuft.bg}
        """

rule get_total_count:
    input:
        bg="results/star/{sample}/coverage.bedgraph"
    output:
        "results/star/{sample}/total_counts.txt"
    shell:
        """
        count=$(awk '{{sum+=$4}} END {{print sum}}' {input.bg})
        echo $count > {output}
        """

rule get_median_total_count:
    input:
        total_counts=expand("results/star/{sample}/total_counts.txt", sample=config['Samples'])
    output:
        "results/star/median_total_counts.txt"
    shell:
        """
        cat {input.total_counts} | sort -n | awk '{{a[NR]=$1}} END {{print (NR%2==1) ? a[(NR+1)/2] : (a[NR/2]+a[NR/2+1])/2}}' > {output}
        """

rule normalize_bedgraph:
    input:
        bg="results/star/{sample}/coverage.bedgraph",
        total_counts="results/star/{sample}/total_counts.txt",
        median_total_counts="results/star/median_total_counts.txt"
    output:
        norm_bg="results/star/{sample}/coverage_norm.bedgraph"
    shell:
        """
        total_counts=$(cat {input.total_counts})
        median_total_counts=$(cat {input.median_total_counts})
        factor=$(echo "scale=4; $median_total_counts/$total_counts" | bc)
        awk -v factor=$factor '{{print $1"\t"$2"\t"$3"\t"$4*factor}}' {input.bg} > {output.norm_bg}
        """

rule norm_coverage_bw:
    input:
        norm_bg="results/star/{sample}/coverage_norm.bedgraph",
        chrom_size="resources/genome/GRCm39/mm39.chrom.sizes"
    output:
        bw="results/star/{sample}/coverage_norm.bw"
    shell:
        """
        bedGraphToBigWig {input.norm_bg} {input.chrom_size} {output.bw}
        """

##--------------------------------------##
##  Track Hub                           ##
##--------------------------------------##